{"version":3,"sources":["initialization.js","components/IsItShabbat.js","App.js","serviceWorker.js","index.js","components/Copyright.js"],"names":["DateTime","utilities","defaultLocation","coords","latitude","longitude","initialization","Object","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","abrupt","Promise","all","resolve","i18n","locale","window","navigator","language","geolocation","getCurrentPosition","location","console","info","warn","then","act","action","initialize","local","state","dispatch","stop","underAWeek","ShabbatCheck","components","CountDown","connect","now","_ref","_useState","useState","_useState2","slicedToArray","showCount","setShowCount","react_default","createElement","period","countDownTo","Fragment","id","t","concat","onClick","end","start","callback","setNow","dur","duration","toLocaleString","month","day","hour","minute","SETUP_STATE","Uninitialized","App","initialized","setInitialized","useEffect","className","es","store","IsItShabbat","App_Uninitialized","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ca4288c3.chunk.js","sourcesContent":["import {\n    utilities,\n    action,\n    state,\n} from 'is-it-shabbat-core';\nimport i18n from 'i18n-js';\n\nconst { DateTime } = utilities;\n\nconst defaultLocation = {\n    // TODO(james.fulford): get location by IP\n    coords: {\n        latitude: 31.776875,\n        longitude: 35.233673,\n    },\n};\n\nconst getLocationAsync = () => new Promise((resolve) => {\n    if (window.navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(\n            (location) => {\n                console.info('Location:', location);\n                resolve(location);\n            },\n            () => resolve(defaultLocation),\n        );\n    } else {\n        console.warn('Using default location:', defaultLocation);\n        resolve(defaultLocation);\n        // reject('No geolocation available for this browser');\n    }\n});\n\nexport default async () => Promise.all([\n    Promise.resolve(() => {\n        i18n.locale = (window.navigator && navigator.language) || 'en';\n    }),\n    getLocationAsync().then((location) => {\n        const act = action.initialize(\n            DateTime.local(),\n            //\n            //\n            // Simulate different times\n            //\n            //\n\n            // Done at (43, -71)\n            //\n            // 2 weeks before Rosh Hashana\n            //\n\n            // Weekday\n            // eslint-disable-next-line\n            // DateTime.fromObject({ zone: 'America/New_York', year: 2018, month: 8, day: 22, hour: 7, minute: 0, second: 0 }),\n\n            // Friday, pre-candlelighting\n            // eslint-disable-next-line\n            // DateTime.fromObject({ zone: 'America/New_York', year: 2018, month: 8, day: 24, hour: 14, minute: 0, second: 0 }),\n\n            // Candlelighting Crossover\n            // eslint-disable-next-line\n            // DateTime.fromObject({ zone: 'America/New_York', year: 2018, month: 8, day: 24, hour: 19, minute: 18, second: 10 }),\n\n            // Candlelighting\n            // eslint-disable-next-line\n            // DateTime.fromObject({ zone: 'America/New_York', year: 2018, month: 8, day: 24, hour: 19, minute: 22, second: 30 }),\n\n            // Shabbat crossover\n            // eslint-disable-next-line\n            // DateTime.fromObject({ zone: 'America/New_York', year: 2018, month: 8, day: 24, hour: 19, minute: 36, second: 10 }),\n\n            // Friday Shabbat\n            // eslint-disable-next-line\n            // DateTime.fromObject({ zone: 'America/New_York', year: 2018, month: 8, day: 24, hour: 21, minute: 0, second: 0 }),\n\n            // Friday Saturday crossover\n            // eslint-disable-next-line\n            // DateTime.fromObject({ zone: 'America/New_York', year: 2018, month: 8, day: 24, hour: 23, minute: 59, second: 55 }),\n\n            // Saturday Shabbat\n            // eslint-disable-next-line\n            // DateTime.fromObject({ zone: 'America/New_York', year: 2018, month: 8, day: 25, hour: 14, minute: 0, second: 0 }),\n\n            // Havdala\n            // eslint-disable-next-line\n            // DateTime.fromObject({ zone: 'America/New_York', year: 2018, month: 8, day: 25, hour: 20, minute: 16, second: 32 }),\n\n            // Saturday Not Shabbat\n            // eslint-disable-next-line\n            // DateTime.fromObject({ zone: 'America/New_York', year: 2018, month: 8, day: 25, hour: 21, minute: 0, second: 0 }),\n\n            //\n            // Hannukah\n            //\n\n            // Holiday crossover\n            // eslint-disable-next-line\n            // DateTime.fromObject({ zone: 'America/New_York', year: 2018, month: 12, day: 2, hour: 16, minute: 11, second: 44 }),\n            location,\n        );\n        state.dispatch(act);\n    }),\n]);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport i18n from 'i18n-js';\n\nimport {\n    action,\n    components,\n    utilities,\n} from 'is-it-shabbat-core';\n\nconst { DateTime, underAWeek } = utilities;\nconst { ShabbatCheck, CountDown } = components;\n\nexport const IsItShabbatPure = ({ now, location, dispatch }) => {\n    const [ showCount, setShowCount ] = useState(true);\n    return (\n    <ShabbatCheck now={ now } location = { location }>\n        {(period, countDownTo) => (\n            <>\n            <span id=\"is-it\">{i18n.t(`status.${period}`)}</span>\n            <span id=\"byline\" onClick={() => setShowCount(!showCount)}>\n                {\n                    showCount\n                    ? (\n                        <CountDown\n                            end={countDownTo}\n                            start={now}\n                            callback={end => dispatch(action.setNow(end))}\n                        >\n                            {dur => (\n                                <span id=\"day-or-days\">{i18n.t(\n                                    `endEventName.${period}`,\n                                    { duration: underAWeek(dur) },\n                                )}</span>\n                            )}\n                        </CountDown>\n                    ) : (\n                        <span id=\"days-left\">{i18n.t(\n                            `startEventName.${period}`,\n                            {\n                                end: countDownTo.toLocaleString({\n                                    month: 'short',\n                                    day: '2-digit',\n                                    hour: '2-digit',\n                                    minute: '2-digit',\n                                }),\n                            },\n                        )}</span>\n                    )\n                }\n\n            </span>\n            </>\n        )}\n    </ShabbatCheck>\n    );\n}\nIsItShabbatPure.propTypes = {\n    now: PropTypes.instanceOf(DateTime).isRequired,\n    location: PropTypes.shape({\n        coords: PropTypes.shape({\n            latitude: PropTypes.number,\n            longitude: PropTypes.number,\n        }),\n    }).isRequired,\n    dispatch: PropTypes.func.isRequired,\n};\n\nexport default connect(\n    state => ({\n        now: state.now,\n        location: state.location,\n    }),\n)(IsItShabbatPure);\n","import React, { useState, useEffect } from 'react';\nimport { Provider } from 'react-redux';\n\nimport {\n  state,\n} from 'is-it-shabbat-core';\n\nimport initialize from './initialization';\nimport IsItShabbat from './components/IsItShabbat';\n\nconst SETUP_STATE = {\n  SETUP_NEEDED: 0,\n  LOADING: 1,\n  DONE: 2,\n};\n\nconst Uninitialized = () => (\n  <>\n  <span id=\"is-it\">-</span>\n  <span id=\"byline\">\n    <span id=\"day-or-days\">-</span>\n  </span>\n  </>\n);\n\nconst App = () => {\n  const [initialized, setInitialized] = useState(SETUP_STATE.SETUP_NEEDED);\n\n  useEffect(() => {\n    if (initialized === SETUP_STATE.SETUP_NEEDED) {\n      setInitialized(SETUP_STATE.LOADING);\n      initialize().then(() => {\n        setInitialized(SETUP_STATE.DONE);\n      });\n    }\n  });\n\n  return (\n    <div className=\"container\">\n      <span id=\"title\">Is It Shabbat?</span>\n      {\n        initialized === SETUP_STATE.DONE\n          ? (\n            <Provider store={state}>\n              <IsItShabbat />\n            </Provider>\n          ) : <Uninitialized />\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Copyright from './components/Copyright';\n\nReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<Copyright />, document.getElementById('copyright'));\nserviceWorker.register();\n","import React from 'react';\nimport i18n from 'i18n-js';\n\nexport default () => (<span>{i18n.t('copyright')}</span>)\n"],"sourceRoot":""}